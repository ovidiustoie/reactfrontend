/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LibrarianAddDTO,
  LibrarianDTOPagedResponseRequestResponse,
  LibrarianDTORequestResponse,
  LibrarianUpdateDTO,
  RequestResponse,
} from '../models/index';
import {
    LibrarianAddDTOFromJSON,
    LibrarianAddDTOToJSON,
    LibrarianDTOPagedResponseRequestResponseFromJSON,
    LibrarianDTOPagedResponseRequestResponseToJSON,
    LibrarianDTORequestResponseFromJSON,
    LibrarianDTORequestResponseToJSON,
    LibrarianUpdateDTOFromJSON,
    LibrarianUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models/index';

export interface ApiLibrarianAddPostRequest {
    librarianAddDTO?: LibrarianAddDTO;
}

export interface ApiLibrarianDeleteIdDeleteRequest {
    id: string;
}

export interface ApiLibrarianGetByIdIdGetRequest {
    id: string;
}

export interface ApiLibrarianGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiLibrarianUpdatePutRequest {
    librarianUpdateDTO?: LibrarianUpdateDTO;
}

/**
 * 
 */
export class LibrarianApi extends runtime.BaseAPI {

    /**
     */
    async apiLibrarianAddPostRaw(requestParameters: ApiLibrarianAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Librarian/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LibrarianAddDTOToJSON(requestParameters['librarianAddDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiLibrarianAddPost(requestParameters: ApiLibrarianAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiLibrarianAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLibrarianDeleteIdDeleteRaw(requestParameters: ApiLibrarianDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLibrarianDeleteIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Librarian/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiLibrarianDeleteIdDelete(requestParameters: ApiLibrarianDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiLibrarianDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLibrarianGetByIdIdGetRaw(requestParameters: ApiLibrarianGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibrarianDTORequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiLibrarianGetByIdIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Librarian/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LibrarianDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiLibrarianGetByIdIdGet(requestParameters: ApiLibrarianGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibrarianDTORequestResponse> {
        const response = await this.apiLibrarianGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLibrarianGetPageGetRaw(requestParameters: ApiLibrarianGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LibrarianDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Librarian/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LibrarianDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiLibrarianGetPageGet(requestParameters: ApiLibrarianGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LibrarianDTOPagedResponseRequestResponse> {
        const response = await this.apiLibrarianGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiLibrarianUpdatePutRaw(requestParameters: ApiLibrarianUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Librarian/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LibrarianUpdateDTOToJSON(requestParameters['librarianUpdateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiLibrarianUpdatePut(requestParameters: ApiLibrarianUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiLibrarianUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

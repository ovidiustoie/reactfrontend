/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BookItemDTO,
  BookItemDTOPagedResponseRequestResponse,
  BookItemDTORequestResponse,
  BookItemUpdateDTO,
  RequestResponse,
} from '../models/index';
import {
    BookItemDTOFromJSON,
    BookItemDTOToJSON,
    BookItemDTOPagedResponseRequestResponseFromJSON,
    BookItemDTOPagedResponseRequestResponseToJSON,
    BookItemDTORequestResponseFromJSON,
    BookItemDTORequestResponseToJSON,
    BookItemUpdateDTOFromJSON,
    BookItemUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models/index';

export interface ApiBookItemAddPostRequest {
    bookItemDTO?: BookItemDTO;
}

export interface ApiBookItemDeleteIdDeleteRequest {
    id: string;
}

export interface ApiBookItemGetByIdIdGetRequest {
    id: string;
}

export interface ApiBookItemGetPageGetRequest {
    bookId?: string;
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiBookItemUpdatePutRequest {
    bookItemUpdateDTO?: BookItemUpdateDTO;
}

/**
 * 
 */
export class BookItemApi extends runtime.BaseAPI {

    /**
     */
    async apiBookItemAddPostRaw(requestParameters: ApiBookItemAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/BookItem/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BookItemDTOToJSON(requestParameters['bookItemDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiBookItemAddPost(requestParameters: ApiBookItemAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiBookItemAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookItemDeleteIdDeleteRaw(requestParameters: ApiBookItemDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBookItemDeleteIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/BookItem/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiBookItemDeleteIdDelete(requestParameters: ApiBookItemDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiBookItemDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookItemGetByIdIdGetRaw(requestParameters: ApiBookItemGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookItemDTORequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiBookItemGetByIdIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/BookItem/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookItemDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiBookItemGetByIdIdGet(requestParameters: ApiBookItemGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookItemDTORequestResponse> {
        const response = await this.apiBookItemGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookItemGetPageGetRaw(requestParameters: ApiBookItemGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookItemDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters['bookId'] != null) {
            queryParameters['bookId'] = requestParameters['bookId'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/BookItem/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookItemDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiBookItemGetPageGet(requestParameters: ApiBookItemGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookItemDTOPagedResponseRequestResponse> {
        const response = await this.apiBookItemGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiBookItemUpdatePutRaw(requestParameters: ApiBookItemUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/BookItem/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BookItemUpdateDTOToJSON(requestParameters['bookItemUpdateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiBookItemUpdatePut(requestParameters: ApiBookItemUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiBookItemUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
